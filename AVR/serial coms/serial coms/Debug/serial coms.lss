
serial coms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000000c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000072  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000000f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e2  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000655  00000000  00000000  0000084a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000244  00000000  00000000  00000e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000010e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000368  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000014d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	12 d0       	rcall	.+36     	; 0x66 <main>
  42:	15 c0       	rjmp	.+42     	; 0x6e <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <spi_init_slave>:
#include <avr/pinDefines.h>
#include <avr/macros.h>

void spi_init_slave (void)
{
	SPI_SS_DDR &= ~(1 << SPI_SS);                        /* set SS input */
  46:	22 98       	cbi	0x04, 2	; 4
	
	SPI_MOSI_DDR &= !(1 << SPI_MOSI);                   /* input on MOSI */
  48:	84 b1       	in	r24, 0x04	; 4
  4a:	14 b8       	out	0x04, r1	; 4
	SPI_MISO_DDR |= (1 << SPI_MISO);                   /* output on MISO */
  4c:	24 9a       	sbi	0x04, 4	; 4
	
	SPI_MOSI_PORT |= (1 << SPI_MOSI);                  /* pullup on MOSI */
  4e:	2b 9a       	sbi	0x05, 3	; 5
	SPI_SCK_DDR &= ~(1 << SPI_SCK);                      /* input on SCK */
  50:	25 98       	cbi	0x04, 5	; 4
	
	SPCR |= (1 << SPE);                                        /* enable */
  52:	8c b5       	in	r24, 0x2c	; 44
  54:	80 64       	ori	r24, 0x40	; 64
  56:	8c bd       	out	0x2c, r24	; 44
  58:	08 95       	ret

0000005a <spi_tranceiver>:
	
}

unsigned char spi_tranceiver (unsigned char data)
{
	SPDR = data;
  5a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF) ));
  5c:	0d b4       	in	r0, 0x2d	; 45
  5e:	07 fe       	sbrs	r0, 7
  60:	fd cf       	rjmp	.-6      	; 0x5c <spi_tranceiver+0x2>
	return(SPDR);
  62:	8e b5       	in	r24, 0x2e	; 46
}
  64:	08 95       	ret

00000066 <main>:

int main(void)
{
	spi_init_slave();
  66:	ef df       	rcall	.-34     	; 0x46 <spi_init_slave>
	unsigned char data = 0;
  68:	80 e0       	ldi	r24, 0x00	; 0
	while(1)
	{
		data = spi_tranceiver(data);
  6a:	f7 df       	rcall	.-18     	; 0x5a <spi_tranceiver>
  6c:	fe cf       	rjmp	.-4      	; 0x6a <main+0x4>

0000006e <_exit>:
  6e:	f8 94       	cli

00000070 <__stop_program>:
  70:	ff cf       	rjmp	.-2      	; 0x70 <__stop_program>
